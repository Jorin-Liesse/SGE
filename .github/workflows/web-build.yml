name: Build for Web
on: [workflow_dispatch]

jobs:
  build-web:
    name: Build demo for Web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive


      - name: Set project env vars
        run: |
          PROJECT=$(python3 -c "import json; print(json.load(open('assets/data/info.json'))['project'])")
          COMPANY=$(python3 -c "import json; print(json.load(open('assets/data/info.json'))['company'])")
          MANIFEST_ORIENTATION=$(python3 -c "import json; print(json.load(open('assets/data/info.json'))['manifest-orientation'])")
          MANIFEST_WINDOW_MODE=$(python3 -c "import json; print(json.load(open('assets/data/info.json'))['manifest-window-mode'])")
          ICON_PATH=$(python3 -c "import json; print(json.load(open('assets/data/info.json'))['icon-path'])")
          RESOURCES_PATH=$(python3 -c "import json; print(json.load(open('assets/data/info.json'))['resources-path'])")

          echo "PROJECT=$PROJECT" >> $GITHUB_ENV
          echo "COMPANY=$COMPANY" >> $GITHUB_ENV
          echo "MANIFEST_ORIENTATION=$MANIFEST_ORIENTATION" >> $GITHUB_ENV
          echo "MANIFEST_WINDOW_MODE=$MANIFEST_WINDOW_MODE" >> $GITHUB_ENV
          echo "ICON_PATH=$ICON_PATH" >> $GITHUB_ENV
          echo "RESOURCES_PATH=$RESOURCES_PATH" >> $GITHUB_ENV


      - name: Get Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git --depth=1
          cd emsdk
          ./emsdk install tot
          ./emsdk activate tot
      - name: Build for web
        run: |
          source emsdk/emsdk_env.sh
          emcmake cmake -S . -B build
          cmake --build build --parallel
      - name: Prepare for upload
        run: |
           mkdir _site
           mv build/${{ env.PROJECT }}.js _site/
           mv build/${{ env.PROJECT }}.data _site/
           mv build/${{ env.PROJECT }}.wasm _site/
           mv ${{ env.RESOURCES_PATH }}/index.html _site/
           mv ${{ env.RESOURCES_PATH }}/style.css _site/
           mv ${{ env.RESOURCES_PATH }}/script.js _site/
           mv ${{ env.RESOURCES_PATH }}/manifest.json _site/
      - name: Fix permissions
        run: |
         chmod -c -R +rX "_site/" | while read line; do
           echo "::warning title=Invalid file permissions automatically fixed::$line"
         done


      - name: Replace placeholders with env vars
        run: |
          # Export all workflow env vars to shell
          export PROJECT="${{ env.PROJECT }}"
          export MANIFEST_ORIENTATION="${{ env.MANIFEST_ORIENTATION }}"
          export MANIFEST_WINDOW_MODE="${{ env.MANIFEST_WINDOW_MODE }}"
          export ICON_PATH="${{ env.ICON_PATH }}"

          # Replace placeholders in all relevant files
          for file in _site/index.html _site/script.js _site/style.css _site/manifest.json; do
            envsubst < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

      - name: Prepare icon folder
        run: |
          ICON_DIR=$(dirname "${{ env.ICON_PATH }}")
          mkdir -p "_site/$ICON_DIR"
          cp "${{ env.ICON_PATH }}" "_site/$ICON_DIR/"
      
      - name: Upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/
        
 # Deploy job
  deploy:
    # Add a dependency to the build job
    needs: build-web

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or the latest "vX.X.X" version tag for this action
